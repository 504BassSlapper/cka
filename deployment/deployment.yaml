apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: nginx
  name: nginx
spec:
  selector:
    matchLabels:
      app: nginx
  strategy: 
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 1
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: nginx
    spec:
      volumes:
      - name: nginx-config-volume
        configMap: 
          name: config
      containers:
      - image: nginx
        command: ["nginx"]
        args: ["-g" , "daemon off; worker_priority 10;"]
        name: nginx
        ports:
        - containerPort: 80
          name: frontend-port
        env:
        - name: var1
          value: "val1"
        - name: var2
          value: "val2"
        resources: {}
        volumeMounts:
        - name: nginx-config-volume
          mountPath: /etc/nginx/conf.d/
        envFrom:
        - secretRef: 
            name: passwords

status: {}

# or
# kubectl set env deployment nginx --env var1=value1 --env var2=val2

---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  creationTimestamp: null
  name: nginx
spec:
  maxReplicas: 4
  minReplicas: 2
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: nginx
  targetCPUUtilizationPercentage: 5


---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: frontend
  name: frontend
spec:
  ports:
  - name: "80"
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app: frontend
  type: NodePort
status:
  loadBalancer: {}
